<?php
/**
 * ClockifyHookApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * skriptfabrik API
 *
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 2.1.0+e417cb8
 * Contact: info@skriptfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Skriptfabrik\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Skriptfabrik\ApiClient\ApiException;
use Skriptfabrik\ApiClient\Configuration;
use Skriptfabrik\ApiClient\HeaderSelector;
use Skriptfabrik\ApiClient\ObjectSerializer;

/**
 * ClockifyHookApi Class Doc Comment
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClockifyHookApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createClockifyHook' => [
            'application/vnd.api+json',
        ],
        'deleteClockifyHook' => [
            'application/json',
        ],
        'getClockifyHook' => [
            'application/json',
        ],
        'getClockifyHookCollection' => [
            'application/json',
        ],
        'updateClockifyHook' => [
            'application/vnd.api+json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createClockifyHook
     *
     * Create Clockify Hook
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookCreateRequest $clockify_hook_create_request Create Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyHookResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function createClockifyHook($include = null, $clockify_hook_create_request = null, string $contentType = self::contentTypes['createClockifyHook'][0])
    {
        list($response) = $this->createClockifyHookWithHttpInfo($include, $clockify_hook_create_request, $contentType);
        return $response;
    }

    /**
     * Operation createClockifyHookWithHttpInfo
     *
     * Create Clockify Hook
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookCreateRequest $clockify_hook_create_request Create Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyHookResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClockifyHookWithHttpInfo($include = null, $clockify_hook_create_request = null, string $contentType = self::contentTypes['createClockifyHook'][0])
    {
        $request = $this->createClockifyHookRequest($include, $clockify_hook_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyHookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyHookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createClockifyHookAsync
     *
     * Create Clockify Hook
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookCreateRequest $clockify_hook_create_request Create Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClockifyHookAsync($include = null, $clockify_hook_create_request = null, string $contentType = self::contentTypes['createClockifyHook'][0])
    {
        return $this->createClockifyHookAsyncWithHttpInfo($include, $clockify_hook_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClockifyHookAsyncWithHttpInfo
     *
     * Create Clockify Hook
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookCreateRequest $clockify_hook_create_request Create Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClockifyHookAsyncWithHttpInfo($include = null, $clockify_hook_create_request = null, string $contentType = self::contentTypes['createClockifyHook'][0])
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse';
        $request = $this->createClockifyHookRequest($include, $clockify_hook_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClockifyHook'
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookCreateRequest $clockify_hook_create_request Create Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClockifyHookRequest($include = null, $clockify_hook_create_request = null, string $contentType = self::contentTypes['createClockifyHook'][0])
    {




        $resourcePath = '/api/admin/clockify_hooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($clockify_hook_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($clockify_hook_create_request));
            } else {
                $httpBody = $clockify_hook_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteClockifyHook
     *
     * Delete Clockify Hook
     *
     * @param  string $clockify_hook_id clockify_hook_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteClockifyHook($clockify_hook_id, string $contentType = self::contentTypes['deleteClockifyHook'][0])
    {
        $this->deleteClockifyHookWithHttpInfo($clockify_hook_id, $contentType);
    }

    /**
     * Operation deleteClockifyHookWithHttpInfo
     *
     * Delete Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClockifyHookWithHttpInfo($clockify_hook_id, string $contentType = self::contentTypes['deleteClockifyHook'][0])
    {
        $request = $this->deleteClockifyHookRequest($clockify_hook_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteClockifyHookAsync
     *
     * Delete Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyHookAsync($clockify_hook_id, string $contentType = self::contentTypes['deleteClockifyHook'][0])
    {
        return $this->deleteClockifyHookAsyncWithHttpInfo($clockify_hook_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteClockifyHookAsyncWithHttpInfo
     *
     * Delete Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyHookAsyncWithHttpInfo($clockify_hook_id, string $contentType = self::contentTypes['deleteClockifyHook'][0])
    {
        $returnType = '';
        $request = $this->deleteClockifyHookRequest($clockify_hook_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteClockifyHook'
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteClockifyHookRequest($clockify_hook_id, string $contentType = self::contentTypes['deleteClockifyHook'][0])
    {

        // verify the required parameter 'clockify_hook_id' is set
        if ($clockify_hook_id === null || (is_array($clockify_hook_id) && count($clockify_hook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_hook_id when calling deleteClockifyHook'
            );
        }
        if (strlen($clockify_hook_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.deleteClockifyHook, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_hook_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.deleteClockifyHook, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_hook_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_hook_id\" when calling ClockifyHookApi.deleteClockifyHook, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }
        

        $resourcePath = '/api/admin/clockify_hooks/{clockifyHookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_hook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyHookId' . '}',
                ObjectSerializer::toPathValue($clockify_hook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyHook
     *
     * Retrieve Clockify Hook
     *
     * @param  string $clockify_hook_id clockify_hook_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyHookResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyHook($clockify_hook_id, $include = null, string $contentType = self::contentTypes['getClockifyHook'][0])
    {
        list($response) = $this->getClockifyHookWithHttpInfo($clockify_hook_id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getClockifyHookWithHttpInfo
     *
     * Retrieve Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyHookResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyHookWithHttpInfo($clockify_hook_id, $include = null, string $contentType = self::contentTypes['getClockifyHook'][0])
    {
        $request = $this->getClockifyHookRequest($clockify_hook_id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyHookResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyHookResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyHookAsync
     *
     * Retrieve Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyHookAsync($clockify_hook_id, $include = null, string $contentType = self::contentTypes['getClockifyHook'][0])
    {
        return $this->getClockifyHookAsyncWithHttpInfo($clockify_hook_id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyHookAsyncWithHttpInfo
     *
     * Retrieve Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyHookAsyncWithHttpInfo($clockify_hook_id, $include = null, string $contentType = self::contentTypes['getClockifyHook'][0])
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookResponse';
        $request = $this->getClockifyHookRequest($clockify_hook_id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyHook'
     *
     * @param  string $clockify_hook_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyHookRequest($clockify_hook_id, $include = null, string $contentType = self::contentTypes['getClockifyHook'][0])
    {

        // verify the required parameter 'clockify_hook_id' is set
        if ($clockify_hook_id === null || (is_array($clockify_hook_id) && count($clockify_hook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_hook_id when calling getClockifyHook'
            );
        }
        if (strlen($clockify_hook_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.getClockifyHook, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_hook_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.getClockifyHook, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_hook_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_hook_id\" when calling ClockifyHookApi.getClockifyHook, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }
        


        $resourcePath = '/api/admin/clockify_hooks/{clockifyHookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($clockify_hook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyHookId' . '}',
                ObjectSerializer::toPathValue($clockify_hook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyHookCollection
     *
     * Retrieve Clockify Hook Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHookCollection'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyHookCollection($limit = 10, $page = 1, $included = null, string $contentType = self::contentTypes['getClockifyHookCollection'][0])
    {
        list($response) = $this->getClockifyHookCollectionWithHttpInfo($limit, $page, $included, $contentType);
        return $response;
    }

    /**
     * Operation getClockifyHookCollectionWithHttpInfo
     *
     * Retrieve Clockify Hook Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHookCollection'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyHookCollectionWithHttpInfo($limit = 10, $page = 1, $included = null, string $contentType = self::contentTypes['getClockifyHookCollection'][0])
    {
        $request = $this->getClockifyHookCollectionRequest($limit, $page, $included, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyHookCollectionAsync
     *
     * Retrieve Clockify Hook Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHookCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyHookCollectionAsync($limit = 10, $page = 1, $included = null, string $contentType = self::contentTypes['getClockifyHookCollection'][0])
    {
        return $this->getClockifyHookCollectionAsyncWithHttpInfo($limit, $page, $included, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyHookCollectionAsyncWithHttpInfo
     *
     * Retrieve Clockify Hook Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHookCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyHookCollectionAsyncWithHttpInfo($limit = 10, $page = 1, $included = null, string $contentType = self::contentTypes['getClockifyHookCollection'][0])
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyHookCollectionResponse';
        $request = $this->getClockifyHookCollectionRequest($limit, $page, $included, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyHookCollection'
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClockifyHookCollection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyHookCollectionRequest($limit = 10, $page = 1, $included = null, string $contentType = self::contentTypes['getClockifyHookCollection'][0])
    {

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ClockifyHookApi.getClockifyHookCollection, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ClockifyHookApi.getClockifyHookCollection, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/api/admin/clockify_hooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $included,
            'included', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateClockifyHook
     *
     * Update Clockify Hook
     *
     * @param  string $clockify_hook_id clockify_hook_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookUpdateRequest $clockify_hook_update_request Update Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateClockifyHook($clockify_hook_id, $clockify_hook_update_request = null, string $contentType = self::contentTypes['updateClockifyHook'][0])
    {
        $this->updateClockifyHookWithHttpInfo($clockify_hook_id, $clockify_hook_update_request, $contentType);
    }

    /**
     * Operation updateClockifyHookWithHttpInfo
     *
     * Update Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookUpdateRequest $clockify_hook_update_request Update Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClockifyHook'] to see the possible values for this operation
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClockifyHookWithHttpInfo($clockify_hook_id, $clockify_hook_update_request = null, string $contentType = self::contentTypes['updateClockifyHook'][0])
    {
        $request = $this->updateClockifyHookRequest($clockify_hook_id, $clockify_hook_update_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateClockifyHookAsync
     *
     * Update Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookUpdateRequest $clockify_hook_update_request Update Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyHookAsync($clockify_hook_id, $clockify_hook_update_request = null, string $contentType = self::contentTypes['updateClockifyHook'][0])
    {
        return $this->updateClockifyHookAsyncWithHttpInfo($clockify_hook_id, $clockify_hook_update_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateClockifyHookAsyncWithHttpInfo
     *
     * Update Clockify Hook
     *
     * @param  string $clockify_hook_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookUpdateRequest $clockify_hook_update_request Update Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyHookAsyncWithHttpInfo($clockify_hook_id, $clockify_hook_update_request = null, string $contentType = self::contentTypes['updateClockifyHook'][0])
    {
        $returnType = '';
        $request = $this->updateClockifyHookRequest($clockify_hook_id, $clockify_hook_update_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateClockifyHook'
     *
     * @param  string $clockify_hook_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyHookUpdateRequest $clockify_hook_update_request Update Clockify Hook Request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateClockifyHook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateClockifyHookRequest($clockify_hook_id, $clockify_hook_update_request = null, string $contentType = self::contentTypes['updateClockifyHook'][0])
    {

        // verify the required parameter 'clockify_hook_id' is set
        if ($clockify_hook_id === null || (is_array($clockify_hook_id) && count($clockify_hook_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_hook_id when calling updateClockifyHook'
            );
        }
        if (strlen($clockify_hook_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.updateClockifyHook, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_hook_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_hook_id" when calling ClockifyHookApi.updateClockifyHook, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_hook_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_hook_id\" when calling ClockifyHookApi.updateClockifyHook, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }
        


        $resourcePath = '/api/admin/clockify_hooks/{clockifyHookId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_hook_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyHookId' . '}',
                ObjectSerializer::toPathValue($clockify_hook_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.api+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($clockify_hook_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($clockify_hook_update_request));
            } else {
                $httpBody = $clockify_hook_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
