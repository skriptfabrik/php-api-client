<?php
/**
 * ClockifyUserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * skriptfabrik API
 *
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 1.1.2+e4727fd
 * Contact: info@skriptfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Skriptfabrik\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Skriptfabrik\ApiClient\ApiException;
use Skriptfabrik\ApiClient\Configuration;
use Skriptfabrik\ApiClient\HeaderSelector;
use Skriptfabrik\ApiClient\ObjectSerializer;

/**
 * ClockifyUserApi Class Doc Comment
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClockifyUserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteClockifyUser
     *
     * Delete Clockify User
     *
     * @param  string $clockify_user_id clockify_user_id (required)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteClockifyUser($clockify_user_id)
    {
        $this->deleteClockifyUserWithHttpInfo($clockify_user_id);
    }

    /**
     * Operation deleteClockifyUserWithHttpInfo
     *
     * Delete Clockify User
     *
     * @param  string $clockify_user_id (required)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClockifyUserWithHttpInfo($clockify_user_id)
    {
        $request = $this->deleteClockifyUserRequest($clockify_user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation deleteClockifyUserAsync
     *
     * Delete Clockify User
     *
     * @param  string $clockify_user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyUserAsync($clockify_user_id)
    {
        return $this->deleteClockifyUserAsyncWithHttpInfo($clockify_user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteClockifyUserAsyncWithHttpInfo
     *
     * Delete Clockify User
     *
     * @param  string $clockify_user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyUserAsyncWithHttpInfo($clockify_user_id)
    {
        $returnType = '';
        $request = $this->deleteClockifyUserRequest($clockify_user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteClockifyUser'
     *
     * @param  string $clockify_user_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteClockifyUserRequest($clockify_user_id)
    {

        // verify the required parameter 'clockify_user_id' is set
        if ($clockify_user_id === null || (is_array($clockify_user_id) && count($clockify_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_user_id when calling deleteClockifyUser'
            );
        }
        if (strlen($clockify_user_id) > 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.deleteClockifyUser, must be smaller than or equal to 24.');
        }
        if (strlen($clockify_user_id) < 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.deleteClockifyUser, must be bigger than or equal to 24.');
        }
        if (!preg_match("/^[0-9a-z]{24}$/", $clockify_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_user_id\" when calling ClockifyUserApi.deleteClockifyUser, must conform to the pattern /^[0-9a-z]{24}$/.");
        }


        $resourcePath = '/api/admin/clockify_users/{clockifyUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyUserId' . '}',
                ObjectSerializer::toPathValue($clockify_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyUser
     *
     * Retrieve Clockify User
     *
     * @param  string $clockify_user_id clockify_user_id (required)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyUserResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyUser($clockify_user_id, $included = null)
    {
        list($response) = $this->getClockifyUserWithHttpInfo($clockify_user_id, $included);
        return $response;
    }

    /**
     * Operation getClockifyUserWithHttpInfo
     *
     * Retrieve Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyUserResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyUserWithHttpInfo($clockify_user_id, $included = null)
    {
        $request = $this->getClockifyUserRequest($clockify_user_id, $included);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyUserResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyUserResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyUserResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyUserResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyUserResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyUserAsync
     *
     * Retrieve Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyUserAsync($clockify_user_id, $included = null)
    {
        return $this->getClockifyUserAsyncWithHttpInfo($clockify_user_id, $included)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyUserAsyncWithHttpInfo
     *
     * Retrieve Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyUserAsyncWithHttpInfo($clockify_user_id, $included = null)
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyUserResponse';
        $request = $this->getClockifyUserRequest($clockify_user_id, $included);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyUser'
     *
     * @param  string $clockify_user_id (required)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyUserRequest($clockify_user_id, $included = null)
    {

        // verify the required parameter 'clockify_user_id' is set
        if ($clockify_user_id === null || (is_array($clockify_user_id) && count($clockify_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_user_id when calling getClockifyUser'
            );
        }
        if (strlen($clockify_user_id) > 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.getClockifyUser, must be smaller than or equal to 24.');
        }
        if (strlen($clockify_user_id) < 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.getClockifyUser, must be bigger than or equal to 24.');
        }
        if (!preg_match("/^[0-9a-z]{24}$/", $clockify_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_user_id\" when calling ClockifyUserApi.getClockifyUser, must conform to the pattern /^[0-9a-z]{24}$/.");
        }



        $resourcePath = '/api/admin/clockify_users/{clockifyUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $included,
            'included', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($clockify_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyUserId' . '}',
                ObjectSerializer::toPathValue($clockify_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyUserCollection
     *
     * Retrieve Clockify User Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyUserCollection($limit = 10, $page = 1, $included = null)
    {
        list($response) = $this->getClockifyUserCollectionWithHttpInfo($limit, $page, $included);
        return $response;
    }

    /**
     * Operation getClockifyUserCollectionWithHttpInfo
     *
     * Retrieve Clockify User Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyUserCollectionWithHttpInfo($limit = 10, $page = 1, $included = null)
    {
        $request = $this->getClockifyUserCollectionRequest($limit, $page, $included);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyUserCollectionAsync
     *
     * Retrieve Clockify User Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyUserCollectionAsync($limit = 10, $page = 1, $included = null)
    {
        return $this->getClockifyUserCollectionAsyncWithHttpInfo($limit, $page, $included)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyUserCollectionAsyncWithHttpInfo
     *
     * Retrieve Clockify User Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyUserCollectionAsyncWithHttpInfo($limit = 10, $page = 1, $included = null)
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyUsersCollectionResponse';
        $request = $this->getClockifyUserCollectionRequest($limit, $page, $included);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyUserCollection'
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyUserCollectionRequest($limit = 10, $page = 1, $included = null)
    {

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ClockifyUserApi.getClockifyUserCollection, must be bigger than or equal to 1.');
        }


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ClockifyUserApi.getClockifyUserCollection, must be bigger than or equal to 1.');
        }



        $resourcePath = '/api/admin/clockify_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $included,
            'included', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateClockifyUser
     *
     * Update Clockify User
     *
     * @param  string $clockify_user_id clockify_user_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyUserUpdateRequest $clockify_user_update_request Update Clockify User Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateClockifyUser($clockify_user_id, $clockify_user_update_request = null)
    {
        $this->updateClockifyUserWithHttpInfo($clockify_user_id, $clockify_user_update_request);
    }

    /**
     * Operation updateClockifyUserWithHttpInfo
     *
     * Update Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyUserUpdateRequest $clockify_user_update_request Update Clockify User Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClockifyUserWithHttpInfo($clockify_user_id, $clockify_user_update_request = null)
    {
        $request = $this->updateClockifyUserRequest($clockify_user_id, $clockify_user_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation updateClockifyUserAsync
     *
     * Update Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyUserUpdateRequest $clockify_user_update_request Update Clockify User Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyUserAsync($clockify_user_id, $clockify_user_update_request = null)
    {
        return $this->updateClockifyUserAsyncWithHttpInfo($clockify_user_id, $clockify_user_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateClockifyUserAsyncWithHttpInfo
     *
     * Update Clockify User
     *
     * @param  string $clockify_user_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyUserUpdateRequest $clockify_user_update_request Update Clockify User Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyUserAsyncWithHttpInfo($clockify_user_id, $clockify_user_update_request = null)
    {
        $returnType = '';
        $request = $this->updateClockifyUserRequest($clockify_user_id, $clockify_user_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateClockifyUser'
     *
     * @param  string $clockify_user_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyUserUpdateRequest $clockify_user_update_request Update Clockify User Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateClockifyUserRequest($clockify_user_id, $clockify_user_update_request = null)
    {

        // verify the required parameter 'clockify_user_id' is set
        if ($clockify_user_id === null || (is_array($clockify_user_id) && count($clockify_user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_user_id when calling updateClockifyUser'
            );
        }
        if (strlen($clockify_user_id) > 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.updateClockifyUser, must be smaller than or equal to 24.');
        }
        if (strlen($clockify_user_id) < 24) {
            throw new \InvalidArgumentException('invalid length for "$clockify_user_id" when calling ClockifyUserApi.updateClockifyUser, must be bigger than or equal to 24.');
        }
        if (!preg_match("/^[0-9a-z]{24}$/", $clockify_user_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_user_id\" when calling ClockifyUserApi.updateClockifyUser, must conform to the pattern /^[0-9a-z]{24}$/.");
        }



        $resourcePath = '/api/admin/clockify_users/{clockifyUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyUserId' . '}',
                ObjectSerializer::toPathValue($clockify_user_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($clockify_user_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clockify_user_update_request));
            } else {
                $httpBody = $clockify_user_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
