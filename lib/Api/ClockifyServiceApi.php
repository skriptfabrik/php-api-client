<?php
/**
 * ClockifyServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * skriptfabrik API
 *
 * This is the specification for the skriptfabrik API.
 *
 * The version of the OpenAPI document: 1.1.0+914aca3
 * Contact: info@skriptfabrik.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Skriptfabrik\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Skriptfabrik\ApiClient\ApiException;
use Skriptfabrik\ApiClient\Configuration;
use Skriptfabrik\ApiClient\HeaderSelector;
use Skriptfabrik\ApiClient\ObjectSerializer;

/**
 * ClockifyServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Skriptfabrik\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClockifyServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createClockifyService
     *
     * Create MOCO Service
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceCreateRequest $clockify_service_create_request Create Clockify Service Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyServiceResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function createClockifyService($include = null, $clockify_service_create_request = null)
    {
        list($response) = $this->createClockifyServiceWithHttpInfo($include, $clockify_service_create_request);
        return $response;
    }

    /**
     * Operation createClockifyServiceWithHttpInfo
     *
     * Create MOCO Service
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceCreateRequest $clockify_service_create_request Create Clockify Service Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyServiceResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createClockifyServiceWithHttpInfo($include = null, $clockify_service_create_request = null)
    {
        $request = $this->createClockifyServiceRequest($include, $clockify_service_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 201:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 400:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation createClockifyServiceAsync
     *
     * Create MOCO Service
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceCreateRequest $clockify_service_create_request Create Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClockifyServiceAsync($include = null, $clockify_service_create_request = null)
    {
        return $this->createClockifyServiceAsyncWithHttpInfo($include, $clockify_service_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createClockifyServiceAsyncWithHttpInfo
     *
     * Create MOCO Service
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceCreateRequest $clockify_service_create_request Create Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createClockifyServiceAsyncWithHttpInfo($include = null, $clockify_service_create_request = null)
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse';
        $request = $this->createClockifyServiceRequest($include, $clockify_service_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createClockifyService'
     *
     * @param  string $include The Include Query Parameter. (optional)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceCreateRequest $clockify_service_create_request Create Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createClockifyServiceRequest($include = null, $clockify_service_create_request = null)
    {



        $resourcePath = '/api/admin/clockify_services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($clockify_service_create_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clockify_service_create_request));
            } else {
                $httpBody = $clockify_service_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteClockifyService
     *
     * Delete Clockify Service
     *
     * @param  string $clockify_service_id clockify_service_id (required)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteClockifyService($clockify_service_id)
    {
        $this->deleteClockifyServiceWithHttpInfo($clockify_service_id);
    }

    /**
     * Operation deleteClockifyServiceWithHttpInfo
     *
     * Delete Clockify Service
     *
     * @param  string $clockify_service_id (required)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteClockifyServiceWithHttpInfo($clockify_service_id)
    {
        $request = $this->deleteClockifyServiceRequest($clockify_service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation deleteClockifyServiceAsync
     *
     * Delete Clockify Service
     *
     * @param  string $clockify_service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyServiceAsync($clockify_service_id)
    {
        return $this->deleteClockifyServiceAsyncWithHttpInfo($clockify_service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteClockifyServiceAsyncWithHttpInfo
     *
     * Delete Clockify Service
     *
     * @param  string $clockify_service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteClockifyServiceAsyncWithHttpInfo($clockify_service_id)
    {
        $returnType = '';
        $request = $this->deleteClockifyServiceRequest($clockify_service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteClockifyService'
     *
     * @param  string $clockify_service_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteClockifyServiceRequest($clockify_service_id)
    {

        // verify the required parameter 'clockify_service_id' is set
        if ($clockify_service_id === null || (is_array($clockify_service_id) && count($clockify_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_service_id when calling deleteClockifyService'
            );
        }
        if (strlen($clockify_service_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.deleteClockifyService, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_service_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.deleteClockifyService, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_service_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_service_id\" when calling ClockifyServiceApi.deleteClockifyService, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }


        $resourcePath = '/api/admin/clockify_services/{clockifyServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyServiceId' . '}',
                ObjectSerializer::toPathValue($clockify_service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyService
     *
     * Retrieve Clockify Service
     *
     * @param  string $clockify_service_id clockify_service_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyServiceResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyService($clockify_service_id, $include = null)
    {
        list($response) = $this->getClockifyServiceWithHttpInfo($clockify_service_id, $include);
        return $response;
    }

    /**
     * Operation getClockifyServiceWithHttpInfo
     *
     * Retrieve Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyServiceResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyServiceWithHttpInfo($clockify_service_id, $include = null)
    {
        $request = $this->getClockifyServiceRequest($clockify_service_id, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyServiceAsync
     *
     * Retrieve Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyServiceAsync($clockify_service_id, $include = null)
    {
        return $this->getClockifyServiceAsyncWithHttpInfo($clockify_service_id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyServiceAsyncWithHttpInfo
     *
     * Retrieve Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyServiceAsyncWithHttpInfo($clockify_service_id, $include = null)
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceResponse';
        $request = $this->getClockifyServiceRequest($clockify_service_id, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyService'
     *
     * @param  string $clockify_service_id (required)
     * @param  string $include The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyServiceRequest($clockify_service_id, $include = null)
    {

        // verify the required parameter 'clockify_service_id' is set
        if ($clockify_service_id === null || (is_array($clockify_service_id) && count($clockify_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_service_id when calling getClockifyService'
            );
        }
        if (strlen($clockify_service_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.getClockifyService, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_service_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.getClockifyService, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_service_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_service_id\" when calling ClockifyServiceApi.getClockifyService, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }



        $resourcePath = '/api/admin/clockify_services/{clockifyServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($clockify_service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyServiceId' . '}',
                ObjectSerializer::toPathValue($clockify_service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getClockifyServiceCollection
     *
     * Retrieve Clockify Service Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError
     */
    public function getClockifyServiceCollection($limit = 10, $page = 1, $included = null)
    {
        list($response) = $this->getClockifyServiceCollectionWithHttpInfo($limit, $page, $included);
        return $response;
    }

    /**
     * Operation getClockifyServiceCollectionWithHttpInfo
     *
     * Retrieve Clockify Service Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError|\Skriptfabrik\ApiClient\Model\JsonApiError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClockifyServiceCollectionWithHttpInfo($limit = 10, $page = 1, $included = null)
    {
        $request = $this->getClockifyServiceCollectionRequest($limit, $page, $included);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
            
                case 200:
                    if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 401:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 403:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            
                case 404:
                    if ('\Skriptfabrik\ApiClient\Model\JsonApiError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Skriptfabrik\ApiClient\Model\JsonApiError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Skriptfabrik\ApiClient\Model\JsonApiError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            
            }

            $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation getClockifyServiceCollectionAsync
     *
     * Retrieve Clockify Service Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyServiceCollectionAsync($limit = 10, $page = 1, $included = null)
    {
        return $this->getClockifyServiceCollectionAsyncWithHttpInfo($limit, $page, $included)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClockifyServiceCollectionAsyncWithHttpInfo
     *
     * Retrieve Clockify Service Collection
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClockifyServiceCollectionAsyncWithHttpInfo($limit = 10, $page = 1, $included = null)
    {
        $returnType = '\Skriptfabrik\ApiClient\Model\ClockifyServiceCollectionResponse';
        $request = $this->getClockifyServiceCollectionRequest($limit, $page, $included);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getClockifyServiceCollection'
     *
     * @param  float $limit The Limit Query Parameter. (optional, default to 10)
     * @param  float $page The Page Query Parameter. (optional, default to 1)
     * @param  string $included The Include Query Parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClockifyServiceCollectionRequest($limit = 10, $page = 1, $included = null)
    {

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ClockifyServiceApi.getClockifyServiceCollection, must be bigger than or equal to 1.');
        }


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ClockifyServiceApi.getClockifyServiceCollection, must be bigger than or equal to 1.');
        }



        $resourcePath = '/api/admin/clockify_services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $included,
            'included', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateClockifyService
     *
     * Update Clockify Service
     *
     * @param  string $clockify_service_id clockify_service_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceUpdateRequest $clockify_service_update_request Update Clockify Service Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateClockifyService($clockify_service_id, $clockify_service_update_request = null)
    {
        $this->updateClockifyServiceWithHttpInfo($clockify_service_id, $clockify_service_update_request);
    }

    /**
     * Operation updateClockifyServiceWithHttpInfo
     *
     * Update Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceUpdateRequest $clockify_service_update_request Update Clockify Service Request (optional)
     *
     * @throws \Skriptfabrik\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateClockifyServiceWithHttpInfo($clockify_service_id, $clockify_service_update_request = null)
    {
        $request = $this->updateClockifyServiceRequest($clockify_service_id, $clockify_service_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            
            
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Skriptfabrik\ApiClient\Model\JsonApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            
            }
            throw $e;
        }
    }

    /**
     * Operation updateClockifyServiceAsync
     *
     * Update Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceUpdateRequest $clockify_service_update_request Update Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyServiceAsync($clockify_service_id, $clockify_service_update_request = null)
    {
        return $this->updateClockifyServiceAsyncWithHttpInfo($clockify_service_id, $clockify_service_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateClockifyServiceAsyncWithHttpInfo
     *
     * Update Clockify Service
     *
     * @param  string $clockify_service_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceUpdateRequest $clockify_service_update_request Update Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateClockifyServiceAsyncWithHttpInfo($clockify_service_id, $clockify_service_update_request = null)
    {
        $returnType = '';
        $request = $this->updateClockifyServiceRequest($clockify_service_id, $clockify_service_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateClockifyService'
     *
     * @param  string $clockify_service_id (required)
     * @param  \Skriptfabrik\ApiClient\Model\ClockifyServiceUpdateRequest $clockify_service_update_request Update Clockify Service Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateClockifyServiceRequest($clockify_service_id, $clockify_service_update_request = null)
    {

        // verify the required parameter 'clockify_service_id' is set
        if ($clockify_service_id === null || (is_array($clockify_service_id) && count($clockify_service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clockify_service_id when calling updateClockifyService'
            );
        }
        if (strlen($clockify_service_id) > 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.updateClockifyService, must be smaller than or equal to 26.');
        }
        if (strlen($clockify_service_id) < 26) {
            throw new \InvalidArgumentException('invalid length for "$clockify_service_id" when calling ClockifyServiceApi.updateClockifyService, must be bigger than or equal to 26.');
        }
        if (!preg_match("/^[0-9A-HJ-KM-NP-TV-Z]{26}$/", $clockify_service_id)) {
            throw new \InvalidArgumentException("invalid value for \"clockify_service_id\" when calling ClockifyServiceApi.updateClockifyService, must conform to the pattern /^[0-9A-HJ-KM-NP-TV-Z]{26}$/.");
        }



        $resourcePath = '/api/admin/clockify_services/{clockifyServiceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($clockify_service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clockifyServiceId' . '}',
                ObjectSerializer::toPathValue($clockify_service_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($clockify_service_update_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($clockify_service_update_request));
            } else {
                $httpBody = $clockify_service_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
